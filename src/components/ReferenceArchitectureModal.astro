---
import type { ReferenceArchitecture } from '../types/services';
---

<!-- Reference Architecture Modal -->
<div id="ref-arch-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center p-4">
  <div class="bg-white rounded-lg max-w-5xl w-full max-h-[90vh] overflow-auto">
    <div class="p-6">
      <div class="flex justify-between items-center mb-4">
        <h2 id="ref-arch-title" class="text-xl font-bold text-gray-900">Reference Architecture</h2>
        <button id="close-ref-arch-modal" class="text-gray-500 hover:text-gray-700">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      
      <div class="mb-6">
        <img 
          id="ref-arch-image"
          src="" 
          alt="Reference Architecture" 
          class="w-full rounded-lg border shadow-sm"
        />
      </div>
      
      <div class="space-y-6">
        <!-- Initial Setup Section (conditionally rendered) -->
        <div id="setup-section" class="hidden">
          <h3 class="text-lg font-semibold text-gray-900 mb-3">Initial Setup</h3>
          <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
            <p class="text-sm text-gray-700 mb-3">
              <strong>Before the system can operate,</strong> initial configuration and setup is required:
            </p>
            <div id="setup-steps" class="space-y-2">
              <!-- Setup steps will be dynamically inserted here -->
            </div>
          </div>
        </div>

        <!-- Runtime Flow Section -->
        <div id="runtime-section">
          <h3 class="text-lg font-semibold text-gray-900 mb-3">Runtime Flow</h3>
          <p class="text-sm text-gray-600 mb-4">
            Here's what happens during normal operation:
          </p>
          
          <div id="runtime-steps" class="space-y-3">
            <!-- Runtime steps will be dynamically inserted here -->
          </div>
        </div>
        
        <!-- Technical Details -->
        <div class="mt-6 p-4 bg-orange-50 rounded-lg">
          <h4 class="font-medium text-gray-900 mb-2">Key Technical Benefits</h4>
          <ul id="benefits-list" class="text-sm text-gray-700 space-y-1">
            <!-- Benefits will be dynamically inserted here -->
          </ul>
        </div>

        <!-- Implementation Notes -->
        <div class="mt-4 p-4 bg-gray-50 rounded-lg">
          <h4 class="font-medium text-gray-900 mb-2">Implementation Notes</h4>
          <p id="implementation-notes" class="text-sm text-gray-600">
            <!-- Implementation notes will be dynamically inserted here -->
          </p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Current reference architecture data
  let currentRefArch: any = null;

  // Reference Architecture Modal Functions
  function openRefArchModal(refArchData: any) {
    const modal = document.getElementById('ref-arch-modal');
    if (!modal || !refArchData) return;
    
    currentRefArch = refArchData;
    
    // Update modal content
    updateModalContent(refArchData);
    
    // Show modal
    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden'; // Prevent background scrolling
  }

  function closeRefArchModal() {
    const modal = document.getElementById('ref-arch-modal');
    if (modal) {
      modal.classList.add('hidden');
      document.body.style.overflow = ''; // Restore scrolling
    }
  }

  function updateModalContent(refArch: any) {
    // Update title
    const titleEl = document.getElementById('ref-arch-title');
    if (titleEl) titleEl.textContent = refArch.title;
    
    // Update image
    const imageEl = document.getElementById('ref-arch-image') as HTMLImageElement;
    if (imageEl) {
      imageEl.src = refArch.imagePath;
      imageEl.alt = refArch.title;
    }
    
    // Update setup section
    const setupSection = document.getElementById('setup-section');
    const setupStepsContainer = document.getElementById('setup-steps');
    
    if (refArch.setupSteps && refArch.setupSteps.length > 0 && setupSection && setupStepsContainer) {
      setupSection.classList.remove('hidden');
      setupStepsContainer.innerHTML = refArch.setupSteps.map((step: any) => `
        <div class="flex gap-3">
          <div class="flex-shrink-0 w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-sm font-bold">${step.icon}</div>
          <div>
            <p class="text-sm text-gray-700"><strong>${step.title}</strong> ${step.description}</p>
          </div>
        </div>
      `).join('');
    } else if (setupSection) {
      setupSection.classList.add('hidden');
    }
    
    // Update runtime steps
    const runtimeStepsContainer = document.getElementById('runtime-steps');
    if (runtimeStepsContainer) {
      runtimeStepsContainer.innerHTML = refArch.runtimeSteps.map((step: any) => `
        <div class="flex gap-3">
          <div class="flex-shrink-0 w-6 h-6 bg-[#f6821f] text-white rounded-full flex items-center justify-center text-sm font-bold">${step.stepNumber}</div>
          <div>
            <h4 class="font-medium text-gray-900">${step.title}</h4>
            <p class="text-sm text-gray-600">${step.description}</p>
          </div>
        </div>
      `).join('');
    }
    
    // Update benefits
    const benefitsContainer = document.getElementById('benefits-list');
    if (benefitsContainer) {
      benefitsContainer.innerHTML = refArch.benefits.map((benefit: string) => `
        <li>â€¢ <strong>${benefit.split(':')[0]}${benefit.includes(':') ? ':' : ''}</strong>${benefit.includes(':') ? benefit.split(':').slice(1).join(':') : ''}</li>
      `).join('');
    }
    
    // Update implementation notes
    const notesEl = document.getElementById('implementation-notes');
    if (notesEl) notesEl.textContent = refArch.implementationNotes;
  }

  // Add reference architecture modal handlers
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    if (!target) return;
    
    // Open modal when reference architecture button is clicked
    if (target.closest('[data-ref-arch-trigger]')) {
      e.preventDefault();
      e.stopPropagation();
      
      const trigger = target.closest('[data-ref-arch-trigger]') as HTMLElement;
      const useCaseName = trigger.getAttribute('data-ref-arch-trigger');
      
      // Get reference architecture data from global variable
      if (useCaseName && (window as any).refArchData && (window as any).refArchData[useCaseName]) {
        openRefArchModal((window as any).refArchData[useCaseName]);
      }
    }
    
    // Close modal when close button is clicked
    if (target.closest('#close-ref-arch-modal')) {
      closeRefArchModal();
    }
    
    // Close modal when clicking outside the modal content
    if ((target as any).id === 'ref-arch-modal') {
      closeRefArchModal();
    }
  });

  // Close modal with Escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      closeRefArchModal();
    }
  });

  // Expose functions globally so they can be called from other components
  (window as any).openRefArchModal = openRefArchModal;
  (window as any).closeRefArchModal = closeRefArchModal;
</script> 