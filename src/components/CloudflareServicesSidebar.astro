---
interface Service {
  name: string;
  description: string;
  docsUrl: string;
  selector: string;  // CSS selector for elements
  highlightType: 'badge' | 'outline' | 'both';  // How to highlight elements
  badgeText?: string;  // Custom badge text if needed
  badgeConfigs: {
    selector?: string;  // Specific selector for this badge instance
    tooltip: string;   // Tooltip text for this specific instance
    position?: number; // Position for the badge
    badgeText?: string; // Custom badge text for this specific instance
  }[];
}

const useCases: Service[] = [
  {
    name: "Product Search",
    description: "To create a lightning-fast e-commerce search, you'd use Cloudflare's Vectorize, Workers AI, and KV. Workers AI is used to generate embeddings for the product names and descriptions, Vectorize is used to store and search the embeddings, and KV is used to cache your most frequent searches globally.",
    docsUrl: "https://developers.cloudflare.com/vectorize/",
    selector: ".cf-search",
    highlightType: 'both',
    badgeConfigs: [
      {
        tooltip: "Vector search powered by Vectorize",
        position: 0,
        badgeText: "Vectorize"
      },
      {
        tooltip: "Text embeddings generated with Workers AI",
        position: 1,
        badgeText: "Workers AI"
      },
      {
        tooltip: "Globally cached results from KV",
        position: 2,
        badgeText: "KV"
      }
    ]
  }
  ,
  {
    name: "Product Images",
    description: "For optimal product image delivery, Cloudflare Images handles optimization, and global delivery. Images can be resized and optimized for each device, reducing load times while maintaining quality. Combined with R2, for general purpose object storage..",
    docsUrl: "https://developers.cloudflare.com/images/",
    selector: ".cf-image",
    highlightType: 'both',
    badgeConfigs: [
      {
        selector: ".cf-image", 
        tooltip: "Images optimized and delivered by Cloudflare Images",
        position: 0,
        badgeText: "Images"
      },
      {
        selector: ".cf-image",
        tooltip: "Object storage for images",
        position: 1,
        badgeText: "R2"
      }
    ]
  },
  {
    name: "Application Hosting",
    description: "Your application needs a reliable home on the internet. Cloudflare Workers provides fast, secure hosting for your website, delivering your content quickly to customers worldwide.",
    docsUrl: "https://developers.cloudflare.com/pages/",
    selector: ".cf-app-hosting",
    highlightType: 'both',
    badgeConfigs: [
      {
        tooltip: "Hosted and delivered by Cloudflare Pages",
        position: 0,
        badgeText: "Workers"
      }
    ]
  }
  ,
  {
    name: "Product Details",
    description: "Product details are served using a combination of D1 for structured data storage and Workers for personalized content assembly. Workers AI can help generate engaging product descriptions.",
    docsUrl: "https://developers.cloudflare.com/workers/",
    selector: ".cf-product-details",
    highlightType: 'both',
    badgeConfigs: [
      {
        tooltip: "Product data stored in D1",
        position: 0,
        badgeText: "D1"
      },
      {
        tooltip: "Personalized content and pricing with Workers",
        position: 1,
        badgeText: "Workers"
      },
      {
        tooltip: "AI-enhanced product descriptions",
        position: 2,
        badgeText: "Workers AI"
      },
    ]
  }
];

const developerServices: Service[] = [
  {
    name: "Cloudflare Images",
    description: "Global image delivery and optimization. Cloudflare Images can be used to store images and then serve them in the optimal format for the user's device.",
    docsUrl: "https://developers.cloudflare.com/images/",
    selector: ".cf-image",
    highlightType: 'both',
    badgeText: "Cloudflare Images",
    badgeConfigs: [
      {
        selector: ".cf-image",
        tooltip: "Image delivery powered by Cloudflare Images"
      }
    ]
  },
  {
    name: "D1 - Serverless SQL Database",
    description: "Cloudflare D1 is a fast and reliable database designed for structured data storage and management. It organizes essential information in tables for quick access, ensuring a smooth experience when viewing products, reading reviews, or checking order history",
    docsUrl: "https://developers.cloudflare.com/d1/",
    selector: ".cf-d1",
    highlightType: 'both',
    badgeText: "D1",
    badgeConfigs: [
      {
        selector: ".cf-d1",
        tooltip: "Product details stored and pulled in from D1"
      }
    ]
  },
  {
    name: "Workers - Serverless Compute",
    description: "A dynamic site requires actions beyond just displaying information. Features like 'Add to Cart', applying discounts, and searching for products rely on efficient back-end processing. Cloudflare Workers enable these seamless interactions by validating input, applying pricing rules, personalizing content, and routing requests quickly. This edge computing ensures fast processing, making the site feel immediate and responsive.",
    docsUrl: "https://developers.cloudflare.com/workers/",
    selector: ".cf-workers",
    highlightType: 'both',
    badgeText: "Workers",
    badgeConfigs: [
      {
        selector: ".cf-workers",
        tooltip: "Backend processing powered by Workers"
      }
    ]
  },
  {
    name: "Workers AI",
    description: "Inference as a Service with Serverless GPUs. Workers AI can be used to generate product descriptions, and in this case was used to generate product images.",
    docsUrl: "https://developers.cloudflare.com/workers-ai/",
    selector: ".cf-workersai",
    highlightType: 'both',
    badgeText: "Workers AI",
    badgeConfigs: [
      {
        selector: ".cf-workersai.image",
        tooltip: "Image generated with Workers AI"
      },
      {
        selector: ".cf-workersai.description",
        tooltip: "Product description generated with Workers AI"
      }
    ]
  },
  {
    name: "KV - Key-Value Store",
    description: "Cloudflare's global key-value database. Perfect for caching product data, user preferences, and session information. KV provides fast, low-latency access to data across Cloudflare's global network.",
    docsUrl: "https://developers.cloudflare.com/kv/",
    selector: ".cf-kv",
    highlightType: 'both',
    badgeText: "KV",
    badgeConfigs: [
      {
        selector: ".cf-kv",
        tooltip: "Data caching powered by KV"
      }
    ]
  }
];
---

<aside class="w-80 bg-white border-l border-gray-200 p-6">
  <div class="flex items-center gap-2 mb-8">
    <span class="text-xl">âš¡</span>
    <h2 class="text-lg font-semibold">Powered by Cloudflare</h2>
  </div>
  
  <div class="space-y-4">
    <!-- Use Cases Section -->
    <div class="border rounded-lg overflow-hidden">
      <button 
        class="w-full p-4 bg-gray-50 hover:bg-gray-100 flex items-center justify-between text-left"
        data-category="use-cases"
      >
        <h3 class="font-medium">Use Cases</h3>
        <svg class="w-5 h-5 transform transition-transform" data-category-icon="use-cases" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
      </button>
      <div class="p-4 space-y-4" data-category-content="use-cases">
        {useCases.map(service => (
          <div 
            class="p-4 rounded-lg bg-gray-50 hover:bg-gray-100 transition-colors cursor-pointer"
            data-service={service.name.toLowerCase().replace(/\s+/g, '-')}
            data-active="false"
          >
            <h3 class="text-[#f6821f] font-medium mb-2">{service.name}</h3>
            <div class="cf-service-details" style="display:none">
              <p class="text-sm text-gray-600 mb-3">{service.description}</p>
              <a 
                href={service.docsUrl} 
                target="_blank" 
                rel="noopener noreferrer"
                class="text-[#f6821f] text-sm font-medium hover:underline inline-flex items-center gap-1"
              >
                Learn More
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
              </a>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Developer Services Section -->
    <div class="border rounded-lg overflow-hidden">
      <button 
        class="w-full p-4 bg-gray-50 hover:bg-gray-100 flex items-center justify-between text-left"
        data-category="developer-services"
      >
        <h3 class="font-medium">Developer Services</h3>
        <svg class="w-5 h-5 transform transition-transform" data-category-icon="developer-services" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
        </svg>
      </button>
      <div class="p-4 space-y-4" data-category-content="developer-services">
        {developerServices.map(service => (
          <div 
            class="p-4 rounded-lg bg-gray-50 hover:bg-gray-100 transition-colors cursor-pointer"
            data-service={service.name.toLowerCase().replace(/\s+/g, '-')}
            data-active="false"
          >
            <h3 class="text-[#f6821f] font-medium mb-2">{service.name}</h3>
            <div class="cf-service-details" style="display:none">
              <p class="text-sm text-gray-600 mb-3">{service.description}</p>
              <a 
                href={service.docsUrl} 
                target="_blank" 
                rel="noopener noreferrer"
                class="text-[#f6821f] text-sm font-medium hover:underline inline-flex items-center gap-1"
              >
                Learn More
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
              </a>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
  
  <div class="mt-8 pt-6 border-t border-gray-200">
    <p class="text-xs text-gray-500">
      Note: This is a demo interface. While these Cloudflare services are highlighted, they are not actually implemented in this demo. This is for demonstration purposes only.
    </p>
  </div>
</aside>

<script define:vars={{ useCases, developerServices }}>
  let activeService = null;
  const allServices = [...useCases, ...developerServices];

  // Function to create a badge with tooltip
  function createBadge(badgeText, tooltip, position = 0) {
    const badge = document.createElement('div');
    badge.className = 'absolute bg-[#f6821f] text-white text-xs px-2 py-1 rounded-full flex items-center gap-1 shadow-lg z-50 group';
    // Position the badge in the bottom right, stacked vertically
    badge.style.bottom = `${-8 - (position * 28)}px`; // 28px accounts for badge height + spacing
    badge.style.right = '-8px';
    badge.innerHTML = `
      <svg class="w-3 h-3" viewBox="0 0 24 24" fill="currentColor">
        <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
      </svg>
      <span>${badgeText}</span>
      <div class="absolute bottom-full right-0 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap pointer-events-none">
        ${tooltip}
      </div>
    `;
    return badge;
  }

  // Function to highlight elements
  function highlightElements(service) {
    const elements = document.querySelectorAll(service.selector);
    elements.forEach(el => {
      // Make sure the element has a relative position for the badge
      if (service.highlightType === 'badge' || service.highlightType === 'both') {
        if (getComputedStyle(el).position === 'static') {
          el.style.position = 'relative';
        }
      }
      // Add highlight effect
      if (service.highlightType === 'outline' || service.highlightType === 'both') {
        el.classList.add('ring-2', 'ring-[#f6821f]', 'ring-offset-2', 'transition-all');
      }
      // Add badges if needed
      if (service.highlightType === 'badge' || service.highlightType === 'both') {
        // Clear existing badges for this element
        el.querySelectorAll('.bg-\\[\\#f6821f\\]').forEach(badge => badge.remove());
        // Add all configured badges
        service.badgeConfigs.forEach(config => {
          if (el.matches(config.selector || service.selector)) {
            el.appendChild(createBadge(
              config.badgeText || service.badgeText,
              config.tooltip,
              config.position
            ));
          }
        });
      }
    });
  }

  // Function to remove highlights
  function removeHighlights() {
    // Remove outlines
    document.querySelectorAll('.ring-\\[\\#f6821f\\]').forEach(el => {
      el.classList.remove('ring-2', 'ring-[#f6821f]', 'ring-offset-2');
    });
    
    // Remove badges
    document.querySelectorAll('.bg-\\[\\#f6821f\\]').forEach(badge => {
      badge.remove();
    });
  }

  // Add click handlers to service cards
  document.querySelectorAll('[data-service]').forEach(card => {
    card.addEventListener('click', (e) => {
      const target = e.target;
      // Don't trigger if clicking the "Learn More" link
      if (target.closest('a')) return;
      
      const serviceName = card.getAttribute('data-service');
      const service = allServices.find(s => s.name.toLowerCase().replace(/\s+/g, '-') === serviceName);
      
      if (service) {
        if (activeService === serviceName) {
          // If already active, clear highlights and reset
          removeHighlights();
          activeService = null;
          // Hide all details
          document.querySelectorAll('[data-service]').forEach(c => {
            c.setAttribute('data-active', 'false');
            c.querySelector('.cf-service-details').style.display = 'none';
          });
        } else {
          // Remove any existing highlights
          removeHighlights();
          // Add new highlights
          highlightElements(service);
          activeService = serviceName;
          // Show only the active details
          document.querySelectorAll('[data-service]').forEach(c => {
            if (c.getAttribute('data-service') === serviceName) {
              c.setAttribute('data-active', 'true');
              c.querySelector('.cf-service-details').style.display = '';
            } else {
              c.setAttribute('data-active', 'false');
              c.querySelector('.cf-service-details').style.display = 'none';
            }
          });
        }
      }
    });
  });

  // Add click handlers for category toggles
  document.querySelectorAll('[data-category]').forEach(button => {
    button.addEventListener('click', () => {
      const category = button.getAttribute('data-category');
      const content = document.querySelector(`[data-category-content="${category}"]`);
      const icon = document.querySelector(`[data-category-icon="${category}"]`);
      
      if (content.style.display === 'none') {
        content.style.display = '';
        icon.style.transform = 'rotate(0deg)';
      } else {
        content.style.display = 'none';
        icon.style.transform = 'rotate(-90deg)';
      }
    });
  });
</script> 