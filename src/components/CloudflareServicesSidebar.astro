---
import { useCases, developerServices } from '../types/services';
import ReferenceArchitectureModal from './ReferenceArchitectureModal.astro';
import ServiceCard from './ServiceCard.astro';
---

<aside class="fixed top-0 right-0 h-screen w-80 bg-white border-l border-gray-200 flex flex-col">
  <!-- Tour Mode Interface -->
  <div id="tour-interface" class="hidden flex-1 flex flex-col">
    <div class="flex items-center gap-2 mb-6 px-6 pt-6">
      <span class="text-xl">üéØ</span>
      <h2 class="text-lg font-semibold">Cloudflare Tour</h2>
    </div>
    
    <div class="flex-1 overflow-y-auto px-6">
      <div id="tour-content" class="space-y-4">
        <!-- Tour content will be populated by JavaScript -->
      </div>
    </div>
    
    <div class="flex-shrink-0 pt-4 border-t border-gray-200 p-6">
      <div class="flex justify-between items-center mb-4">
        <button 
          id="tour-prev" 
          class="px-4 py-2 text-gray-600 hover:text-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"
          disabled
        >
          ‚Üê Previous
        </button>
        <span id="tour-progress" class="text-sm text-gray-500">1 of 5</span>
        <button 
          id="tour-next" 
          class="px-4 py-2 bg-[#3E74FF] text-white rounded-lg hover:bg-[#2D5FDF] transition-colors"
        >
          Next ‚Üí
        </button>
      </div>
      <button 
        id="tour-exit" 
        class="w-full px-4 py-2 text-gray-600 hover:text-gray-800 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
      >
        Exit Tour
      </button>
    </div>
  </div>

  <!-- Normal Sidebar Interface -->
  <div id="normal-interface" class="flex-1 overflow-y-auto px-6">
    <div class="flex items-center gap-2 mb-8">
      <span class="text-xl">‚ö°</span>
      <h2 class="text-lg font-semibold">Powered by Cloudflare</h2>
    </div>
    
    <!-- Start Tour Button -->
    <button 
      id="start-tour-btn"
      class="w-full flex items-center justify-center gap-2 px-4 py-2 bg-[#f6821f] text-white rounded-lg hover:bg-[#e6731a] transition-colors mb-6"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
      </svg>
      Start Tour
    </button>
    
    <div class="space-y-4">
      <!-- Use Cases Section -->
      <div class="border rounded-lg overflow-hidden">
        <button 
          class="w-full p-4 bg-gray-50 hover:bg-gray-100 flex items-center justify-between text-left"
          data-category="use-cases"
        >
          <h3 class="font-medium">Use Cases</h3>
          <svg class="w-5 h-5 transform transition-transform" data-category-icon="use-cases" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </button>
        <div class="p-4 space-y-4" data-category-content="use-cases">
          {useCases.slice(1).map(service => (
            <ServiceCard service={service} />
          ))}
        </div>
      </div>

      <!-- Developer Services Section -->
      <div class="border rounded-lg overflow-hidden">
        <button 
          class="w-full p-4 bg-gray-50 hover:bg-gray-100 flex items-center justify-between text-left"
          data-category="developer-services"
        >
          <h3 class="font-medium">Developer Services</h3>
          <svg class="w-5 h-5 transform transition-transform" data-category-icon="developer-services" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </button>
        <div class="p-4 space-y-4" data-category-content="developer-services">
          {developerServices.map(service => (
            <ServiceCard service={service} />
          ))}
        </div>
        
      </div>
    </div>
    <p class="text-xs text-gray-500 pt-2">
      Note: This is a demo interface. While these Cloudflare services are highlighted, they are not actually implemented in this demo. This is for demonstration purposes only.
    </p>
  </div>
  
  <div class="flex-shrink-0 pt-2 border-t border-gray-200 p-2 sticky bottom-0 bg-white">
    <a 
      href="https://forms.gle/ZgX9y5Zeqq9Rpfft9"
      target="_blank"
      rel="noopener noreferrer"
      class="w-full flex items-center justify-center gap-2 px-4 py-2 bg-[#3E74FF] text-white rounded-lg hover:bg-[#2D5FDF] transition-colors"
    >
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd" />
      </svg>
      Provide Feedback
    </a>
  </div>
</aside>

<ReferenceArchitectureModal />

<script define:vars={{ useCases, developerServices }}>
  let activeService = null;
  const allServices = [...useCases, ...developerServices];

  let currentTourStep = 0;
  let isTourActive = false;

  // Tour UI elements
  const tourInterface = document.getElementById('tour-interface');
  const normalInterface = document.getElementById('normal-interface');
  const startTourBtn = document.getElementById('start-tour-btn');
  const tourContent = document.getElementById('tour-content');
  const tourProgress = document.getElementById('tour-progress');
  const tourPrev = document.getElementById('tour-prev');
  const tourNext = document.getElementById('tour-next');
  const tourExit = document.getElementById('tour-exit');

  function startTour() {
    isTourActive = true;
    currentTourStep = 0;
    tourInterface.classList.remove('hidden');
    normalInterface.classList.add('hidden');
    updateTourStep();
  }

  function exitTour() {
    isTourActive = false;
    tourInterface.classList.add('hidden');
    normalInterface.classList.remove('hidden');
    removeTourHighlight();
  }

  function updateTourStep() {
    const step = useCases[currentTourStep];
    
    // Update content
    tourContent.innerHTML = `
      <div class="space-y-4">
        <h3 class="text-lg font-semibold text-gray-900">${step.name}</h3>
        <p class="text-gray-700 leading-relaxed">${step.description}</p>
      </div>
    `;
    
    // Update progress
    tourProgress.textContent = `${currentTourStep + 1} of ${useCases.length}`;
    
    // Update navigation buttons
    tourPrev.disabled = currentTourStep === 0;
    tourNext.textContent = currentTourStep === useCases.length - 1 ? 'Finish' : 'Next ‚Üí';
    
    // Handle highlighting with badge support
    removeTourHighlight();
    if (step.selector) {
      addTourHighlight(step);
    }
  }

  function addTourHighlight(service) {
    const elements = document.querySelectorAll(service.selector);
    elements.forEach(el => {
      // Make sure the element has a relative position for the badge
      if (service.highlightType === 'badge' || service.highlightType === 'both') {
        if (getComputedStyle(el).position === 'static') {
          el.style.position = 'relative';
        }
      }
      
      // Add highlight effect
      if (service.highlightType === 'outline' || service.highlightType === 'both') {
        el.classList.add('ring-4', 'ring-[#f6821f]', 'ring-offset-4', 'transition-all', 'duration-300');
        el.style.zIndex = '10';
      }
      
      // Add badges if needed
      if (service.highlightType === 'badge' || service.highlightType === 'both') {
        attachBadgesToElement(el, service);
      }
    });
  }

  function removeTourHighlight() {
    // Remove outlines
    document.querySelectorAll('.ring-\\[\\#f6821f\\]').forEach(el => {
      el.classList.remove('ring-4', 'ring-[#f6821f]', 'ring-offset-4', 'transition-all', 'duration-300');
      el.style.zIndex = '';
    });
    
    // Remove badges
    document.querySelectorAll('.bg-\\[\\#f6821f\\]').forEach(badge => {
      badge.remove();
    });
  }

  function nextTourStep() {
    if (currentTourStep < useCases.length - 1) {
      currentTourStep++;
      updateTourStep();
    } else {
      exitTour();
    }
  }

  function prevTourStep() {
    if (currentTourStep > 0) {
      currentTourStep--;
      updateTourStep();
    }
  }

  // Tour event listeners
  startTourBtn.addEventListener('click', startTour);
  tourExit.addEventListener('click', exitTour);
  tourNext.addEventListener('click', nextTourStep);
  tourPrev.addEventListener('click', prevTourStep);

  // Initialize collapsible sections
  document.querySelectorAll('[data-category-content]').forEach(content => {
    content.style.display = 'none';
  });
  
  document.querySelectorAll('[data-category-icon]').forEach(icon => {
    icon.style.transform = 'rotate(-90deg)';
  });

  // Create reference architecture data lookup
  const refArchData = {};
  useCases.forEach(service => {
    if (service.referenceArchitecture) {
      const key = service.name.toLowerCase().replace(/\s+/g, '-');
      refArchData[key] = service.referenceArchitecture;
    }
  });
  
  // Expose reference architecture data globally for the modal
  window.refArchData = refArchData;

  // Function to create a badge with tooltip
  function createBadge(badgeText, tooltip, position = 0) {
    const badge = document.createElement('div');
    badge.className = 'absolute bg-[#f6821f] text-white text-sm px-3 py-2 rounded-full flex items-center gap-2 shadow-lg z-50 group';
    // Position the badge in the bottom right, stacked vertically with better spacing
    badge.style.bottom = `${-12 - (position * 40)}px`; // 40px accounts for larger badge height + spacing
    badge.style.right = '-12px';
    badge.innerHTML = `
      <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
        <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
      </svg>
      <span class="font-medium">${badgeText}</span>
      <div class="absolute bottom-full right-0 mb-2 px-3 py-2 bg-gray-900 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap pointer-events-none shadow-lg z-[60] max-w-xs">
        ${tooltip}
        <div class="absolute top-full right-4 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900"></div>
      </div>
    `;
    return badge;
  }

  // Function to create and attach badges to an element
  function attachBadgesToElement(element, service) {
    // Clear existing badges for this element
    element.querySelectorAll('.bg-\\[\\#f6821f\\]').forEach(badge => badge.remove());
    
    // Ensure element has relative positioning for badge placement
    if (getComputedStyle(element).position === 'static') {
      element.style.position = 'relative';
    }
    
    // Add all configured badges with smart positioning
    service.badgeConfigs.forEach((config, index) => {
      if (element.matches(config.selector || service.selector)) {
        const badge = createBadge(
          config.badgeText || service.badgeText,
          config.tooltip,
          config.position
        );
        
        // Smart positioning to prevent overlap and scrollbar issues
        const elementRect = element.getBoundingClientRect();
        const badgeHeight = 40; // Height of each badge
        const badgeSpacing = 8; // Spacing between badges
        const totalBadgeHeight = (service.badgeConfigs.length * badgeHeight) + ((service.badgeConfigs.length - 1) * badgeSpacing);
        
        // Check if badges would extend beyond the viewport bottom
        const viewportHeight = window.innerHeight;
        const elementBottom = elementRect.bottom;
        const badgesBottom = elementBottom + totalBadgeHeight;
        
        if (badgesBottom > viewportHeight) {
          // Position badges above the element instead
          badge.style.bottom = 'auto';
          badge.style.top = `${-12 - (index * 40)}px`;
        }
        
        // Check if badges would extend beyond the viewport right
        const badgeWidth = 120; // Approximate badge width
        const elementRight = elementRect.right;
        const badgesRight = elementRight + badgeWidth;
        
        if (badgesRight > window.innerWidth) {
          // Position badges to the left instead
          badge.style.right = 'auto';
          badge.style.left = '-12px';
        }
        
        element.appendChild(badge);
      }
    });
  }

  // Function to highlight elements
  function highlightElements(service) {
    const elements = document.querySelectorAll(service.selector);
    elements.forEach(el => {
      // Make sure the element has a relative position for the badge
      if (service.highlightType === 'badge' || service.highlightType === 'both') {
        if (getComputedStyle(el).position === 'static') {
          el.style.position = 'relative';
        }
      }
      // Add highlight effect
      if (service.highlightType === 'outline' || service.highlightType === 'both') {
        el.classList.add('ring-2', 'ring-[#f6821f]', 'ring-offset-2', 'transition-all');
      }
      // Add badges if needed
      if (service.highlightType === 'badge' || service.highlightType === 'both') {
        attachBadgesToElement(el, service);
      }
    });
  }

  // Function to remove highlights
  function removeHighlights() {
    // Remove outlines
    document.querySelectorAll('.ring-\\[\\#f6821f\\]').forEach(el => {
      el.classList.remove('ring-2', 'ring-[#f6821f]', 'ring-offset-2');
    });
    
    // Remove badges
    document.querySelectorAll('.bg-\\[\\#f6821f\\]').forEach(badge => {
      badge.remove();
    });
  }

  // Add click handlers to service cards
  document.querySelectorAll('[data-service]').forEach(card => {
    card.addEventListener('click', (e) => {
      const target = e.target;
      // Don't trigger if clicking the "Learn More" link or reference architecture button
      if (target.closest('a') || target.closest('[data-ref-arch-trigger]')) return;
      
      const serviceName = card.getAttribute('data-service');
      const service = allServices.find(s => s.name.toLowerCase().replace(/\s+/g, '-') === serviceName);
      
      if (service) {
        if (activeService === serviceName) {
          // If already active, clear highlights and reset
          removeHighlights();
          activeService = null;
          // Hide all details
          document.querySelectorAll('[data-service]').forEach(c => {
            c.setAttribute('data-active', 'false');
            const details = c.querySelector('.cf-service-details');
            if (details) details.style.display = 'none';
          });
        } else {
          // Remove any existing highlights
          removeHighlights();
          // Add new highlights
          highlightElements(service);
          activeService = serviceName;
          // Show only the active details
          document.querySelectorAll('[data-service]').forEach(c => {
            if (c.getAttribute('data-service') === serviceName) {
              c.setAttribute('data-active', 'true');
              const details = c.querySelector('.cf-service-details');
              if (details) details.style.display = '';
            } else {
              c.setAttribute('data-active', 'false');
              const details = c.querySelector('.cf-service-details');
              if (details) details.style.display = 'none';
            }
          });
        }
      }
    });
  });

  // Add click handlers for category toggles
  document.querySelectorAll('[data-category]').forEach(button => {
    button.addEventListener('click', () => {
      const category = button.getAttribute('data-category');
      const content = document.querySelector(`[data-category-content="${category}"]`);
      const icon = document.querySelector(`[data-category-icon="${category}"]`);
      
      if (content.style.display === 'none') {
        content.style.display = '';
        icon.style.transform = 'rotate(0deg)';
      } else {
        content.style.display = 'none';
        icon.style.transform = 'rotate(-90deg)';
      }
    });
  });
</script> 