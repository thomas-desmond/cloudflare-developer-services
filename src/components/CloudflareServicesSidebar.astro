---
interface Service {
  name: string;
  description: string;
  docsUrl: string;
  selector: string;  // CSS selector for elements
  highlightType: 'badge' | 'outline' | 'both';  // How to highlight elements
  badgeText?: string;  // Custom badge text if needed
}

const services: Service[] = [
  {
    name: "Vectorize",
    description: "Cloudflare's vector database for AI-powered search",
    docsUrl: "https://developers.cloudflare.com/vectorize/",
    selector: "#cf-vectorize",
    highlightType: 'both',
    badgeText: "Vectorize"

  },
  {
    name: "Cloudflare Images",
    description: "Global image delivery and optimization",
    docsUrl: "https://developers.cloudflare.com/images/",
    selector: "#cf-image",
    highlightType: 'both',
    badgeText: "Cloudflare Images"
  },
  {
    name: "D1 - Serverless SQL Database",
    description: "Cloudflare D1 is a fast and reliable database designed for structured data storage and management. It organizes essential information in tables for quick access, ensuring a smooth experience when viewing products, reading reviews, or checking order history",
    docsUrl: "https://developers.cloudflare.com/d1/",
    selector: "#cf-d1",
    highlightType: 'both',
    badgeText: "Cloudflare D1"
  },
  {
    name: "Workers - Serverless Compute",
    description: "A dynamic site requires actions beyond just displaying information. Features like 'Add to Cart', applying discounts, and searching for products rely on efficient back-end processing. Cloudflare Workers enable these seamless interactions by validating input, applying pricing rules, personalizing content, and routing requests quickly. This edge computing ensures fast processing, making the site feel immediate and responsive.",
    docsUrl: "https://developers.cloudflare.com/workers/",
    selector: "#cf-workers",
    highlightType: 'both',
    badgeText: "Cloudflare Workers"
  }
];
---

<aside class="w-80 bg-white border-l border-gray-200 p-6">
  <div class="flex items-center gap-2 mb-8">
    <span class="text-xl">âš¡</span>
    <h2 class="text-lg font-semibold">Powered by Cloudflare</h2>
  </div>
  
  <div class="space-y-4">
    {services.map(service => (
      <div 
        class="p-4 rounded-lg bg-gray-50 hover:bg-gray-100 transition-colors cursor-pointer"
        data-service={service.name.toLowerCase().replace(/\s+/g, '-')}
        data-active="false"
      >
        <h3 class="text-[#f6821f] font-medium mb-2">{service.name}</h3>
        <div class="cf-service-details" style="display:none">
          <p class="text-sm text-gray-600 mb-3">{service.description}</p>
          <a 
            href={service.docsUrl} 
            target="_blank" 
            rel="noopener noreferrer"
            class="text-[#f6821f] text-sm font-medium hover:underline inline-flex items-center gap-1"
          >
            Learn More
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
          </a>
        </div>
      </div>
    ))}
  </div>
</aside>

<script define:vars={{ services }}>
  let activeService = null;

  // Function to create a badge
  function createBadge(text) {
    const badge = document.createElement('div');
    badge.className = 'absolute bg-[#f6821f] text-white text-xs px-2 py-1 rounded-full flex items-center gap-1 shadow-lg z-50';
    badge.style.bottom = '-8px';
    badge.style.right = '-8px';
    badge.innerHTML = `
      <svg class="w-3 h-3" viewBox="0 0 24 24" fill="currentColor">
        <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
      </svg>
      <span>${text}</span>
    `;
    return badge;
  }

  // Function to highlight elements
  function highlightElements(selector, type, badgeText) {
    const elements = document.querySelectorAll(selector);
    elements.forEach(el => {
      // Make sure the element has a relative position for the badge
      if (type === 'badge' || type === 'both') {
        if (getComputedStyle(el).position === 'static') {
          el.style.position = 'relative';
        }
      }
      
      // Add highlight effect
      if (type === 'outline' || type === 'both') {
        el.classList.add('ring-2', 'ring-[#f6821f]', 'ring-offset-2', 'transition-all');
      }
      
      // Add badge if needed
      if ((type === 'badge' || type === 'both') && badgeText) {
        if (!el.querySelector('.bg-\\[\\#f6821f\\]')) {
          el.appendChild(createBadge(badgeText));
        }
      }
    });
  }

  // Function to remove highlights
  function removeHighlights() {
    // Remove outlines
    document.querySelectorAll('.ring-\\[\\#f6821f\\]').forEach(el => {
      el.classList.remove('ring-2', 'ring-[#f6821f]', 'ring-offset-2');
    });
    
    // Remove badges
    document.querySelectorAll('.bg-\\[\\#f6821f\\]').forEach(badge => {
      badge.remove();
    });
  }

  // Add click handlers to service cards
  document.querySelectorAll('[data-service]').forEach(card => {
    card.addEventListener('click', (e) => {
      const target = e.target;
      // Don't trigger if clicking the "Learn More" link
      if (target.closest('a')) return;
      
      const serviceName = card.getAttribute('data-service');
      const service = services.find(s => s.name.toLowerCase().replace(/\s+/g, '-') === serviceName);
      
      if (service) {
        if (activeService === serviceName) {
          // If already active, clear highlights and reset
          removeHighlights();
          activeService = null;
          // Hide all details
          document.querySelectorAll('[data-service]').forEach(c => {
            c.setAttribute('data-active', 'false');
            c.querySelector('.cf-service-details').style.display = 'none';
          });
        } else {
          // Remove any existing highlights
          removeHighlights();
          // Add new highlights
          highlightElements(service.selector, service.highlightType, service.badgeText);
          activeService = serviceName;
          // Show only the active details
          document.querySelectorAll('[data-service]').forEach(c => {
            if (c.getAttribute('data-service') === serviceName) {
              c.setAttribute('data-active', 'true');
              c.querySelector('.cf-service-details').style.display = '';
            } else {
              c.setAttribute('data-active', 'false');
              c.querySelector('.cf-service-details').style.display = 'none';
            }
          });
        }
      }
    });
  });
</script> 